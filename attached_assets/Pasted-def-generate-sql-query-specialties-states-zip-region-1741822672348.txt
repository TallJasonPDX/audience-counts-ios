def generate_sql_query(specialties,
                       states,
                       zip_regions,
                       geo_logic,
                       min_years=0,
                       min_months=0,
                       max_years=0,
                       max_months=0):
    """Generate the SQL query based on selected filters."""
    # Base query with specific fields
    base_fields = """
        "First Name" as fn,
        "Last Name" as ln,
        "Email1" as email,
        "Telephone" as phone,
        "City" as ct,
        "State" as st,
        "Zip Code" as zip
    """

    # Start building the query
    query_parts = []

    # Generate CTEs for each zip region
    if zip_regions and any(r["zip"] and r["radius"] for r in zip_regions):
        for i, region in enumerate(zip_regions):
            if region["zip"] and region["radius"]:
                query_parts.append(f"""
                radius_{i} AS (
                    SELECT DISTINCT z.geoid10 as zip_code
                    FROM zip_shp z,
                        (SELECT geom FROM zip_shp WHERE geoid10 = '{region["zip"]}') as center
                    WHERE ST_DWithin(z.geom, center.geom, {region["radius"]} * 1609.34, false)
                )""")

    # Start main query
    main_query = f"SELECT {base_fields} FROM public.liveramp_rn_feed r WHERE 1=1"

    # Add specialty conditions (always AND)
    if specialties:
        specialty_conditions = []
        for specialty in specialties:
            segment_code = next(
                (s['segment_code']
                 for s in load_specialties() if s['specialty'] == specialty),
                None)
            if segment_code:
                specialty_conditions.append(
                    f"\"{segment_code.upper()}\" = '1'")
        if specialty_conditions:
            main_query += f" AND ({' OR '.join(specialty_conditions)})"

    # Add experience filter conditions
    if min_years > 0 or min_months > 0:
        min_months_total = min_years * 12 + min_months
        main_query += f""" AND "License Date" <= CURRENT_DATE - INTERVAL '{min_months_total} months'"""

    if max_years > 0 or max_months > 0:
        max_months_total = max_years * 12 + max_months
        main_query += f""" AND "License Date" >= CURRENT_DATE - INTERVAL '{max_months_total} months'"""

    # Geographic conditions
    geo_conditions = []

    # State condition
    if states:
        state_list = [f"'{s.strip()}'" for s in states.split(',') if s.strip()]
        if state_list:
            geo_conditions.append(f"\"State\" IN ({','.join(state_list)})")

    # Zip code regions condition using CTEs
    zip_conditions = []
    if zip_regions and any(r["zip"] and r["radius"] for r in zip_regions):
        for i in range(
                len([r for r in zip_regions if r["zip"] and r["radius"]])):
            zip_conditions.append(
                f"r.\"Zip Code\" IN (SELECT zip_code FROM radius_{i})")

    if zip_conditions:
        geo_conditions.append(f"({' OR '.join(zip_conditions)})")

    # Combine geographic conditions based on selected logic
    if geo_conditions:
        main_query += f" AND ({f' {geo_logic} '.join(geo_conditions)})"

    # Combine CTEs with main query
    if query_parts:
        return f"""WITH {','.join(query_parts)} {main_query}"""
    else:
        return main_query